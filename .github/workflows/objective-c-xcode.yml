name: Xcode - Build and Analyze

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Analyze dylib using xcodebuild
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo gem install cocoapods xcpretty
          pod install  # 如果使用 CocoaPods

      - name: Set Scheme
        id: set_scheme
        run: |
          schemes=$(xcodebuild -list -json | jq -r '.project.schemes[]')
          scheme=$(echo "$schemes" | grep 'Dylib' | head -n 1)
          if [ -z "$scheme" ]; then
            echo "No suitable scheme found."
            exit 1
          fi
          echo "scheme=$scheme" >> $GITHUB_ENV
          echo "Using scheme: $scheme"

      - name: Build
        env:
          scheme: ${{ env.scheme }}
        run: |
          echo "Current directory contents:"
          ls -la

          # Determine project type
          if [ -n "$(ls *.xcworkspace 2>/dev/null)" ]; then
            workspace=$(ls *.xcworkspace)
            filetype_parameter="-workspace"
            file_to_build="$workspace"
          elif [ -n "$(ls *.xcodeproj 2>/dev/null)" ]; then
            project=$(ls *.xcodeproj)
            filetype_parameter="-project"
            file_to_build="$project"
          else
            echo "No .xcworkspace or .xcodeproj file found."
            exit 1
          fi

          echo "File to build: $file_to_build"
          echo "Using scheme: $scheme"

          # Clean, build, and analyze
          xcodebuild clean build analyze \
            -scheme "$scheme" \
            $filetype_parameter "$file_to_build" \
            -configuration Release \
            | xcpretty

          # Locate the .dylib file
          dylib_path=$(find . -name "*.dylib" | head -n 1)
          if [ -z "$dylib_path" ]; then
            echo "No .dylib file found after build."
            exit 1
          fi
          echo "dylib_path=$dylib_path" >> $GITHUB_ENV

      - name: Upload .dylib Artifact
        uses: actions/upload-artifact@v3
        with:
          name: my-dylib
          path: ${{ env.dylib_path }}
