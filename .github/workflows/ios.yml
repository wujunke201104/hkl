name: Build Dynamic Library

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build Dynamic Library using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat > default
          echo Using default scheme: $default

      - name: Build .dylib
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          
          # 获取项目文件
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then 
            filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; 
          else 
            filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; 
          fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`

          # 构建动态库
          xcodebuild build -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -configuration Release ONLY_ACTIVE_ARCH=NO

      - name: Check for .dylib
        run: |
          # 检查输出目录并列出生成的 .dylib 文件
          output_dir="Build/Products/Release-iphoneos/"
          echo "Checking for .dylib files in $output_dir"
          ls -l $output_dir*.dylib || echo "No .dylib files found"
